services:
  postgres:
    image: postgis/postgis:14-3.3
    container_name: ra_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-redatlas}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ra_redis
    ports:
      - '${REDIS_PORT:-6379}:6379'
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: ra_rabbitmq
    ports:
      - '${RABBITMQ_PORT:-5672}:5672'
      - '${RABBITMQ_MGMT_PORT:-15672}:15672'
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-admin123}

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ra_api
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    ports:
      - '${API_PORT:-3000}:3000'
    command: npm run start:dev
    volumes:
      - ./:/app
      - /app/node_modules

volumes:
  pg_data:
  redis_data:
